<%- include('../layout/main', { 
  title: 'Categorias',
  body: `
    <div class="card">
      <h2>üè∑Ô∏è Gerenciar Categorias</h2>
      
      <!-- Formul√°rio para criar/editar categoria -->
      <div style="margin-bottom: 2rem;">
        <h3>Nova Categoria</h3>
        <form id="categoryForm" style="display: grid; grid-template-columns: 1fr 1fr auto; gap: 1rem; align-items: end;">
          <div class="form-group">
            <label for="categoryName">Nome da Categoria *</label>
            <input type="text" id="categoryName" class="form-control" required>
          </div>
          
          <div class="form-group">
            <label for="categoryDescription">Descri√ß√£o</label>
            <input type="text" id="categoryDescription" class="form-control">
          </div>
          
          <div class="form-group" style="display: flex; gap: 0.5rem;">
            <button type="submit" class="btn btn-success">Salvar</button>
            <button type="button" id="cancelEditCategory" class="btn" style="display: none;">Cancelar</button>
          </div>
        </form>
      </div>
    </div>

    <div class="card">
      <h2>üìã Lista de Categorias</h2>
      
      <table id="categoriesTable">
        <thead>
          <tr>
            <th>Nome</th>
            <th>Descri√ß√£o</th>
            <th>N¬∫ de Tarefas</th>
            <th>A√ß√µes</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td colspan="4" class="loading">Carregando categorias...</td>
          </tr>
        </tbody>
      </table>
    </div>

    <script>
      let editingCategoryId = null;
      let allCategories = [];
      let allTasks = [];

      // Fun√ß√£o para carregar categorias
      async function loadCategories() {
        try {
          const response = await fetch('/api/categories');
          if (!response.ok) {
            throw new Error('Erro ao buscar categorias');
          }
          allCategories = await response.json();
          renderCategories();
        } catch (error) {
          console.error('Erro ao carregar categorias:', error);
          const tableBody = document.querySelector('#categoriesTable tbody');
          tableBody.innerHTML = '<tr><td colspan="4" style="text-align: center; color: #dc3545;">Erro ao carregar categorias.</td></tr>';
        }
      }

      // Fun√ß√£o para carregar tarefas (para contar quantas tarefas cada categoria tem)
      async function loadTasks() {
        try {
          const response = await fetch('/api/tasks');
          if (response.ok) {
            allTasks = await response.json();
          }
        } catch (error) {
          console.error('Erro ao carregar tarefas:', error);
        }
      }

      // Fun√ß√£o para renderizar categorias na tabela
      function renderCategories() {
        const tableBody = document.querySelector('#categoriesTable tbody');
        tableBody.innerHTML = '';

        if (allCategories.length > 0) {
          allCategories.forEach(category => {
            const row = document.createElement('tr');
            
            // Contar quantas tarefas pertencem a esta categoria
            const taskCount = allTasks.filter(task => task.category_id === category.id).length;

            row.innerHTML = \`
              <td>\${category.name || 'Sem nome'}</td>
              <td>\${category.description || 'Sem descri√ß√£o'}</td>
              <td>\${taskCount} tarefa(s)</td>
              <td>
                <button onclick="editCategory('\${category.id}')" class="btn btn-warning" style="padding: 0.25rem 0.5rem; font-size: 0.875rem; margin-right: 0.25rem;">Editar</button>
                <button onclick="deleteCategory('\${category.id}')" class="btn btn-danger" style="padding: 0.25rem 0.5rem; font-size: 0.875rem;">Excluir</button>
              </td>
            \`;
            tableBody.appendChild(row);
          });
        } else {
          tableBody.innerHTML = '<tr><td colspan="4" style="text-align: center; color: #6c757d;">Nenhuma categoria encontrada.</td></tr>';
        }
      }

      // Fun√ß√£o para salvar categoria (criar ou editar)
      async function saveCategory(event) {
        event.preventDefault();
        
        const name = document.getElementById('categoryName').value.trim();
        const description = document.getElementById('categoryDescription').value.trim();

        if (!name) {
          alert('Nome da categoria √© obrigat√≥rio!');
          return;
        }

        const categoryData = {
          name: name,
          description: description
        };

        try {
          let response;
          if (editingCategoryId) {
            // Editar categoria existente
            response = await fetch(\`/api/categories/\${editingCategoryId}\`, {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(categoryData)
            });
          } else {
            // Criar nova categoria
            response = await fetch('/api/categories', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(categoryData)
            });
          }

          if (response.ok) {
            // Limpar formul√°rio
            document.getElementById('categoryForm').reset();
            cancelEditCategory();
            
            // Recarregar categorias
            await loadCategories();
            
            alert(editingCategoryId ? 'Categoria atualizada com sucesso!' : 'Categoria criada com sucesso!');
          } else {
            const errorData = await response.json();
            alert('Erro ao salvar categoria: ' + (errorData.message || 'Erro desconhecido'));
          }
        } catch (error) {
          console.error('Erro ao salvar categoria:', error);
          alert('Erro ao salvar categoria. Tente novamente.');
        }
      }

      // Fun√ß√£o para editar categoria
      function editCategory(categoryId) {
        const category = allCategories.find(cat => cat.id === categoryId);
        if (category) {
          editingCategoryId = categoryId;
          document.getElementById('categoryName').value = category.name || '';
          document.getElementById('categoryDescription').value = category.description || '';
          document.getElementById('cancelEditCategory').style.display = 'inline-block';
          document.querySelector('#categoryForm button[type="submit"]').textContent = 'Atualizar';
        }
      }

      // Fun√ß√£o para cancelar edi√ß√£o
      function cancelEditCategory() {
        editingCategoryId = null;
        document.getElementById('categoryForm').reset();
        document.getElementById('cancelEditCategory').style.display = 'none';
        document.querySelector('#categoryForm button[type="submit"]').textContent = 'Salvar';
      }

      // Fun√ß√£o para excluir categoria
      async function deleteCategory(categoryId) {
        // Verificar se h√° tarefas usando esta categoria
        const tasksUsingCategory = allTasks.filter(task => task.category_id === categoryId);
        
        if (tasksUsingCategory.length > 0) {
          alert(\`N√£o √© poss√≠vel excluir esta categoria pois ela est√° sendo usada por \${tasksUsingCategory.length} tarefa(s).\`);
          return;
        }

        if (confirm('Tem certeza que deseja excluir esta categoria?')) {
          try {
            const response = await fetch(\`/api/categories/\${categoryId}\`, {
              method: 'DELETE'
            });

            if (response.ok) {
              await loadCategories();
              alert('Categoria exclu√≠da com sucesso!');
            } else {
              const errorData = await response.json();
              alert('Erro ao excluir categoria: ' + (errorData.message || 'Erro desconhecido'));
            }
          } catch (error) {
            console.error('Erro ao excluir categoria:', error);
            alert('Erro ao excluir categoria. Tente novamente.');
          }
        }
      }

      // Event listeners
      document.getElementById('categoryForm').addEventListener('submit', saveCategory);
      document.getElementById('cancelEditCategory').addEventListener('click', cancelEditCategory);

      // Carregar dados ao inicializar a p√°gina
      document.addEventListener('DOMContentLoaded', function() {
        loadTasks().then(() => {
          loadCategories();
        });
      });
    </script>
  `
}) %>
